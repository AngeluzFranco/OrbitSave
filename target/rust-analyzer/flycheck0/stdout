{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.103","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.103\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.103\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\proc-macro2-352b8885042aea15\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\proc-macro2-352b8885042aea15\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.103","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span_location","proc_macro_span_file"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\proc-macro2-9471494de1994910\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.41","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.41\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.41\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\quote-e6db9c3fe01e6580\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\quote-e6db9c3fe01e6580\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.20","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.20\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libunicode_ident-07e85466622f1c88.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libunicode_ident-07e85466622f1c88.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libversion_check-bc9a57e4f71cef9c.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libversion_check-bc9a57e4f71cef9c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.19.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.19.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.19.0\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\typenum-5c6036466f6a56b2\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\typenum-5c6036466f6a56b2\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_core@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_core-1.0.228\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_core-1.0.228\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","result","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde_core-fe4e12263e96879e\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde_core-fe4e12263e96879e\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.228\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.228\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde-284d27df18c093b2\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde-284d27df18c093b2\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.145","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.145\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.145\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde_json-244a9d2bd5043cfe\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde_json-244a9d2bd5043cfe\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcfg_if-20bb53187b6715fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libitoa-a420aee979f1e685.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libitoa-a420aee979f1e685.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libryu-ab3a6423c992808d.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libryu-ab3a6423c992808d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libmemchr-1cdd9fc5d51c1a11.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libmemchr-1cdd9fc5d51c1a11.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"subtle","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsubtle-e6264e737995d5ca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.5.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libautocfg-8e68ba8c9cc64d10.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libautocfg-8e68ba8c9cc64d10.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#const-oid@0.9.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\const-oid-0.9.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"const_oid","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\const-oid-0.9.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libconst_oid-1d4e14ebfa3b22b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strsim@0.11.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.11.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.11.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstrsim-37af6206315be47a.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstrsim-37af6206315be47a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.41","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\quote-102a82c13fe8e5c0\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.103","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.103\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.103\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libproc_macro2-3361ad6623339f56.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libproc_macro2-3361ad6623339f56.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.19.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\typenum-657c4dfdec2c1e1a\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_core@1.0.228","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde_core-4c32884a5d259c6a\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.228","linked_libs":[],"linked_paths":[],"cfgs":["if_docsrs_then_no_serde_core"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde-15a02bf4066364b5\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.145","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\serde_json-e4cd23a57b9d499a\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\generic-array-de128cb40ce51637\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\generic-array-de128cb40ce51637\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.16\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.16\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["js","js-sys","std","wasm-bindgen"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libgetrandom-112e6c48927a6f1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libfnv-df07894ab45c216a.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libfnv-df07894ab45c216a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ident_case@1.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ident_case-1.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ident_case","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ident_case-1.0.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libident_case-7324a3e5f5a42e72.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libident_case-7324a3e5f5a42e72.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\generic-array-0df9a23ed55d3c36\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\generic-array-0df9a23ed55d3c36\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\num-traits-e0c1286a9ce5cc20\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\num-traits-e0c1286a9ce5cc20\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#schemars@0.8.22","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\schemars-0.8.22\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\schemars-0.8.22\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\schemars-ee45a9a549928999\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\schemars-ee45a9a549928999\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.27","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.27\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.27\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\zerocopy-793199fc09e82c50\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\zerocopy-793199fc09e82c50\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\num-traits-6c3db18c51f7e275\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\num-traits-6c3db18c51f7e275\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote","visit"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\syn-cb2aad11bcd738e5\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\syn-cb2aad11bcd738e5\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.41","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.41\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.41\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libquote-76317c5a53cad4d8.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libquote-76317c5a53cad4d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_core@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_core-1.0.228\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_core","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_core-1.0.228\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","result","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_core-027a360d3ddb75a5.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_core-027a360d3ddb75a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.19.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.19.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.19.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libtypenum-bd531a55d84148be.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.9","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence","ga_is_deprecated"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\generic-array-c82006b4a416749e\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\librand_core-5193f0c292360f52.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\num-traits-c60d8ff17850a0b2\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.27","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_target_has_atomics_1_60_0","zerocopy_aarch64_simd_1_59_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\zerocopy-6b50d5fe36dc624b\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#schemars@0.8.22","linked_libs":[],"linked_paths":[],"cfgs":["std_atomic64","std_atomic"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\schemars-bfa75b37918248b8\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.19.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.19.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.19.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libtypenum-7511b72941da5c04.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libtypenum-7511b72941da5c04.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.9","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence","ga_is_deprecated"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\generic-array-13fb540df859d19c\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\num-traits-a5d53835f8b04728\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.27","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.27\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"semver","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.27\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsemver-7f542511edf85f9d.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsemver-7f542511edf85f9d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\syn-56c457f23eee4ab8\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\paste-8bab462b5cd12688\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\paste-8bab462b5cd12688\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dyn-clone@1.0.20","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dyn-clone-1.0.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dyn_clone","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dyn-clone-1.0.20\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdyn_clone-df0d39d65374446a.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdyn_clone-df0d39d65374446a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcpufeatures-e3eacfc5d1c77f80.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcpufeatures-e3eacfc5d1c77f80.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.108","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.108\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.108\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","visit"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsyn-2090c64e1b1ff338.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsyn-2090c64e1b1ff338.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.145","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.145\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.145\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_json-78c833629446ac02.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_json-78c833629446ac02.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libgeneric_array-4f701dee784c8c7c.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libgeneric_array-4f701dee784c8c7c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_traits-4bb52bdec85e82ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.27","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.27\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.27\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libzerocopy-52ad25bdd83e533d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_traits-841bb3d5ae7240fc.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_traits-841bb3d5ae7240fc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote","visit"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsyn-256aa9736967b938.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsyn-256aa9736967b938.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\paste-4b191ff7faa6407d\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcfg_if-fcf6f9c63968de1e.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcfg_if-fcf6f9c63968de1e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-encoding@2.9.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\data-encoding-2.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_encoding","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\data-encoding-2.9.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdata_encoding-30749730af429165.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdata_encoding-30749730af429165.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_core@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_core-1.0.228\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_core","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_core-1.0.228\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","result","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_core-f67fb10023ed2dba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#escape-bytes@0.1.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\escape-bytes-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"escape_bytes","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\escape-bytes-0.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libescape_bytes-dc66b18fd29efac7.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libescape_bytes-dc66b18fd29efac7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcpufeatures-3020ffd0b9e8c469.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ethnum@1.5.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ethnum-1.5.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ethnum","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ethnum-1.5.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libethnum-9a87f4a7ef582112.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libethnum-9a87f4a7ef582112.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ff@0.13.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ff-0.13.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ff","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ff-0.13.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libff-878d069d57341af2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc_version@0.4.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc_version-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_version","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc_version-0.4.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\librustc_version-c7023697890787c1.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\librustc_version-c7023697890787c1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.228\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.228\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_derive-49ffdea647e6bc81.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_derive-49ffdea647e6bc81.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_derive-49ffdea647e6bc81.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_derive-49ffdea647e6bc81.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zeroize_derive@1.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize_derive-1.4.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zeroize_derive","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize_derive-1.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\zeroize_derive-477a753019e81088.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\zeroize_derive-477a753019e81088.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\zeroize_derive-477a753019e81088.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\zeroize_derive-477a753019e81088.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling_core@0.21.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.21.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"darling_core","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.21.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["strsim","suggestions"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling_core-8507fc0420b20bcc.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling_core-8507fc0420b20bcc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcrypto_common-7165806b63b0240a.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcrypto_common-7165806b63b0240a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libblock_buffer-e53e6a134a53a93d.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libblock_buffer-e53e6a134a53a93d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libppv_lite86-5f93a61a7b027d08.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg_eval@0.1.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_eval-0.1.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"cfg_eval","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg_eval-0.1.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\cfg_eval-ef9d5b9ed5224d7e.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\cfg_eval-ef9d5b9ed5224d7e.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\cfg_eval-ef9d5b9ed5224d7e.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\cfg_eval-ef9d5b9ed5224d7e.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_integer-f8875bb1db68ee74.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_integer-f8875bb1db68ee74.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"paste","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\paste-1.0.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\paste-f84e90df2a3b4d5d.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\paste-f84e90df2a3b4d5d.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\paste-f84e90df2a3b4d5d.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\paste-f84e90df2a3b4d5d.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_integer-06fd2c300b81ed5b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\ahash-383b33d033177f65\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\ahash-383b33d033177f65\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","use_std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libeither-11bfc80e806bb44f.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libeither-11bfc80e806bb44f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base16ct@0.2.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base16ct-0.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base16ct","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base16ct-0.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libbase16ct-e6658f7e2d0abe47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#group@0.13.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\group-0.13.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"group","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\group-0.13.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libgroup-cb5e27735cb33463.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-serialize-derive@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-serialize-derive-0.4.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"ark_serialize_derive","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-serialize-derive-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_serialize_derive-eabaf52862c25a34.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_serialize_derive-eabaf52862c25a34.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_serialize_derive-eabaf52862c25a34.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_serialize_derive-eabaf52862c25a34.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\thiserror-8ad831a78bc45fcd\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\thiserror-8ad831a78bc45fcd\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zeroize","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zeroize_derive"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libzeroize-6e718fbabd7b7b9c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.228\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.228\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde-2fa2dc6f2c02bf29.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde-2fa2dc6f2c02bf29.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling_macro@0.21.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.21.3\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"darling_macro","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.21.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-331e6f9f7da375d5.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-331e6f9f7da375d5.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-331e6f9f7da375d5.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-331e6f9f7da375d5.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdigest-56ef4d1d0328c3a3.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdigest-56ef4d1d0328c3a3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\librand_chacha-821adebdbd8e5aa7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_bigint","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_bigint-a726b7debe5b354a.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_bigint-a726b7debe5b354a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","linked_libs":[],"linked_paths":[],"cfgs":["folded_multiply"],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\ahash-2ee71eebdb35dd43\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.10.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itertools-0.10.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itertools-0.10.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libitertools-ed7289abd4486937.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libitertools-ed7289abd4486937.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_bigint","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libnum_bigint-e33d59e4a79b8f5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.228","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.228\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.228\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde-d64efd3ce6e955b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","race"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libonce_cell-ff0ad348901115f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\libm-1045c69d85fba39a\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\libm-1045c69d85fba39a\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libeither-a882f950409e6c56.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libmemchr-f6b4808565e1c4aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libitoa-2179d09a8cbaa087.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libryu-2aad64c2fa5ccf5a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.9\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libgeneric_array-2510d5b000d3e87b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crate-git-revision@0.0.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crate-git-revision-0.0.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crate_git_revision","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crate-git-revision-0.0.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcrate_git_revision-3e55effc3a8124c5.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcrate_git_revision-3e55effc3a8124c5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling@0.21.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.21.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"darling","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.21.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","suggestions"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling-c2072406967e2ca9.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling-c2072406967e2ca9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#schemars@0.8.22","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\schemars-0.8.22\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"schemars","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\schemars-0.8.22\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libschemars-5ed12ba6e8a74cb7.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libschemars-5ed12ba6e8a74cb7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","serde","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhex-3a3d01dd402d71fa.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhex-3a3d01dd402d71fa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsha2-35b5f5a9bc9b0aff.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsha2-35b5f5a9bc9b0aff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#der@0.7.10","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\der-0.7.10\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"der","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\der-0.7.10\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["oid","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libder-7402a39149a7084a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\librand-11a4cd32a162d26b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","linked_libs":[],"linked_paths":[],"cfgs":["arch_enabled"],"env":[["CFG_CARGO_FEATURES","[\"arch\", \"default\"]"],["CFG_OPT_LEVEL","0"],["CFG_TARGET_FEATURES","[\"cmpxchg16b\", \"fxsr\", \"sse\", \"sse2\", \"sse3\"]"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\libm-3c4f2e063daa3933\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.10.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itertools-0.10.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itertools-0.10.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libitertools-14b4a570114aafc5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libahash-e0394d9dd94b97cb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-ff-macros@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ff-macros-0.4.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"ark_ff_macros","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ff-macros-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_macros-d1a7c439bd6a515f.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_macros-d1a7c439bd6a515f.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_macros-d1a7c439bd6a515f.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_macros-d1a7c439bd6a515f.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.145","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.145\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.145\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_json-356743c980fb5f0d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\thiserror-f193de1d325333fe\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#derivative@2.2.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derivative-2.2.0\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"derivative","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derivative-2.2.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["use_core"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derivative-10e9317c8ea970d6.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derivative-10e9317c8ea970d6.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derivative-10e9317c8ea970d6.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derivative-10e9317c8ea970d6.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.69\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\thiserror_impl-610d059202ed5920.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\thiserror_impl-610d059202ed5920.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\thiserror_impl-610d059202ed5920.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\thiserror_impl-610d059202ed5920.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libblock_buffer-49dc49b95e22da8d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcrypto_common-ef818963c74e01ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-strkey@0.0.13","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-strkey-0.0.13\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-strkey-0.0.13\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-strkey-2a1891adcbcdbff4\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-strkey-2a1891adcbcdbff4\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_with_macros@3.15.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with_macros-3.15.1\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_with_macros","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with_macros-3.15.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["schemars_0_8"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_with_macros-9d46c15dd12b2bc9.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_with_macros-9d46c15dd12b2bc9.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_with_macros-9d46c15dd12b2bc9.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\serde_with_macros-9d46c15dd12b2bc9.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-xdr@23.0.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","curr","hex","serde","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-xdr-79115338f89c499b\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-xdr-79115338f89c499b\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-std@0.4.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-std-0.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ark_std","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-std-0.4.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libark_std-deee6f15caaf35e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sec1@0.7.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sec1-0.7.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sec1","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sec1-0.7.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","der","point","subtle","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsec1-056bc8a1a283df32.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-bigint@0.5.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-bigint-0.5.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_bigint","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-bigint-0.5.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["generic-array","rand_core","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcrypto_bigint-93049619f8205cba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-ff-asm@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ff-asm-0.4.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"ark_ff_asm","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ff-asm-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_asm-ff5dbcf1e4639875.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_asm-ff5dbcf1e4639875.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_asm-ff5dbcf1e4639875.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ark_ff_asm-ff5dbcf1e4639875.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dyn-clone@1.0.20","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dyn-clone-1.0.20\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dyn_clone","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dyn-clone-1.0.20\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdyn_clone-03cda98be49c2bae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libm","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.15\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\liblibm-34fae88177998145.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-xdr@23.0.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","arbitrary","base64","curr","hex","serde","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-xdr-acdc24789e443b9a\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-xdr-acdc24789e443b9a\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.13.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.13.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","default","inline-more"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhashbrown-1bef5b6c1eb9fb97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","serde","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhex-a937846240fab8f3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-derive@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-derive-0.4.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"num_derive","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-derive-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\num_derive-6c9fa8ccd93d9d3d.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\num_derive-6c9fa8ccd93d9d3d.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\num_derive-6c9fa8ccd93d9d3d.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\num_derive-6c9fa8ccd93d9d3d.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","digest","precomputed-tables","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\curve25519-dalek-9fb7bf39abfaab82\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\curve25519-dalek-9fb7bf39abfaab82\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","const-oid","core-api","default","mac","oid","std","subtle"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdigest-34d47fbee15dbb7b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-strkey@0.0.13","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["GIT_REVISION","04a5d0856a01f0be3dd668abc6d25a0ce8923d36"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-strkey-4243f17fbb803415\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-xdr@23.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["GIT_REVISION","e83a6337204ecfdb0ac0d44ffb857130c1249b1b"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-xdr-8293e1420c8add34\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_with@3.15.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with-3.15.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_with","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with-3.15.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","macros","schemars_0_8","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_with-c726cf6a35ffe097.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_with-c726cf6a35ffe097.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#schemars@0.8.22","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\schemars-0.8.22\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"schemars","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\schemars-0.8.22\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libschemars-1cd631b66427f96e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#derive_arbitrary@1.3.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derive_arbitrary-1.3.2\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"derive_arbitrary","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derive_arbitrary-1.3.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derive_arbitrary-42fb5565f5c9c044.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derive_arbitrary-42fb5565f5c9c044.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derive_arbitrary-42fb5565f5c9c044.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\derive_arbitrary-42fb5565f5c9c044.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#downcast-rs@1.2.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\downcast-rs-1.2.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"downcast_rs","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\downcast-rs-1.2.1\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdowncast_rs-27bb1cd9652c2f5a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-encoding@2.9.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\data-encoding-2.9.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_encoding","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\data-encoding-2.9.0\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdata_encoding-44cea99de64c7a86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.16.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.16.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.16.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhashbrown-ac26a93fa943501d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap-nostd@0.4.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-nostd-0.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap_nostd","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-nostd-0.4.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libindexmap_nostd-4335dc830c0697fc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libequivalent-e22c3f4df5e6eed3.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libequivalent-e22c3f4df5e6eed3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.16.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.16.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.16.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhashbrown-a99ecd4b921f7031.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhashbrown-a99ecd4b921f7031.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libequivalent-a82a1228783d4ddb.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-xdr@23.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["GIT_REVISION","e83a6337204ecfdb0ac0d44ffb857130c1249b1b"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\stellar-xdr-6bc2ea1327a1432a\\out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3","linked_libs":[],"linked_paths":[],"cfgs":["curve25519_dalek_bits=\"64\"","curve25519_dalek_backend=\"simd\""],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\curve25519-dalek-b663ff156803e2eb\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-common@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde","shallow-val-hash","std","testutils","wasmi"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-common-574d4377a7bfa912\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-common-574d4377a7bfa912\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-strkey@0.0.13","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-strkey-0.0.13\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stellar_strkey","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-strkey-0.0.13\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstellar_strkey-5c4767465ebbb637.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstellar_strkey-5c4767465ebbb637.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#signature@2.2.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-2.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"signature","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-2.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","digest","rand_core","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsignature-3de28eaf129423a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsha2-8388d801340479f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hmac@0.12.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.12.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hmac","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.12.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["reset"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhmac-6fc59a82d632fd8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#elliptic-curve@0.13.8","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\elliptic-curve-0.13.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"elliptic_curve","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\elliptic-curve-0.13.8\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arithmetic","digest","ff","group","hazmat","sec1"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libelliptic_curve-c928ca429756b774.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-serialize@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-serialize-0.4.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ark_serialize","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-serialize-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ark-serialize-derive","default","derive"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libark_serialize-8f29c0e27cec7571.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arbitrary@1.3.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arbitrary-1.3.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arbitrary","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arbitrary-1.3.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["derive","derive_arbitrary"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libarbitrary-a1431ade332cd2c1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-strkey@0.0.13","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-strkey-0.0.13\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stellar_strkey","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-strkey-0.0.13\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstellar_strkey-f7c62822b9d9779c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wasmparser-nostd@0.100.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmparser-nostd-0.100.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wasmparser_nostd","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmparser-nostd-0.100.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libwasmparser_nostd-186af8732ac7f762.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.12.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.12.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.12.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libindexmap-9982404e268028b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.12.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.12.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.12.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libindexmap-63944dd4ad0e9845.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libindexmap-63944dd4ad0e9845.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_with@3.15.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with-3.15.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_with","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_with-3.15.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","hex","macros","schemars_0_8","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libserde_with-1a8ab5203ed7cd37.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wasmi_core@0.13.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmi_core-0.13.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wasmi_core","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmi_core-0.13.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libwasmi_core-c0e8836a4285ff78.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek-derive@0.1.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-derive-0.1.1\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"curve25519_dalek_derive","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-derive-0.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\curve25519_dalek_derive-1f6b3dc10303c50e.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\curve25519_dalek_derive-1f6b3dc10303c50e.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\curve25519_dalek_derive-1f6b3dc10303c50e.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\curve25519_dalek_derive-1f6b3dc10303c50e.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["union"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsmallvec-a5afbfbd642aca20.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#escape-bytes@0.1.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\escape-bytes-0.1.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"escape_bytes","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\escape-bytes-0.1.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libescape_bytes-f63458ffebd205f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-xdr@23.0.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stellar_xdr","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","curr","hex","serde","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstellar_xdr-ade7147880bd8579.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstellar_xdr-ade7147880bd8579.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rfc6979@0.4.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfc6979-0.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rfc6979","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfc6979-0.4.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\librfc6979-d9fd6c2d2304867f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-ff@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ff-0.4.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ark_ff","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ff-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libark_ff-84e20db400733d5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ethnum@1.5.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ethnum-1.5.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ethnum","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ethnum-1.5.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libethnum-8385fe147c021fb7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wasmi_arena@0.4.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmi_arena-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wasmi_arena","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmi_arena-0.4.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libwasmi_arena-fa869b6f752cd8a4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.27","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.27\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"semver","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.27\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsemver-67cdfc976ead7a29.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libbase64-d22485985cdca7d1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.9.8","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.9.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.9.8\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["mutex","rwlock","spin_mutex","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libspin-17f2a689fd00bd22.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.37","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\prettyplease-0.2.37\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\prettyplease-0.2.37\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\prettyplease-82a20187cb700a93\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\prettyplease-82a20187cb700a93\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ed25519@2.2.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-2.2.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ed25519","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-2.2.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libed25519-ad1d9b50044eae83.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wasmparser@0.116.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmparser-0.116.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wasmparser","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmparser-0.116.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libwasmparser-bed12be9d4a2ae7b.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libwasmparser-bed12be9d4a2ae7b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#primeorder@0.13.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\primeorder-0.13.6\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"primeorder","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\primeorder-0.13.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libprimeorder-a3c9ef4a3c9cfa67.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"curve25519_dalek","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","digest","precomputed-tables","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libcurve25519_dalek-ec097770113521d4.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-common@23.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["GIT_REVISION","73dee74640fd5b3f60d5e130fccdc035d80ce76c"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-common-61321a0be2156c7e\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libthiserror-e0cbfeebbc506193.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libthiserror-e0cbfeebbc506193.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-common@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-common-a6d283b3049ca069\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-common-a6d283b3049ca069\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-macros@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-macros-23.0.1\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"soroban_env_macros","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-macros-23.0.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_env_macros-db452e48bfd5365b.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_env_macros-db452e48bfd5365b.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_env_macros-db452e48bfd5365b.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_env_macros-db452e48bfd5365b.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ecdsa@0.16.9","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ecdsa-0.16.9\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ecdsa","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ecdsa-0.16.9\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arithmetic","der","digest","hazmat","rfc6979","signing","verifying"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libecdsa-4195c4708e23ea3d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-poly@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-poly-0.4.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ark_poly","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-poly-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libark_poly-2109487acdd67572.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stellar-xdr@23.0.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stellar_xdr","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\stellar-xdr-23.0.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","arbitrary","base64","curr","hex","serde","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstellar_xdr-dffdcfb170c5d7de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-wasmi@0.31.1-soroban.20.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-wasmi-0.31.1-soroban.20.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_wasmi","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-wasmi-0.31.1-soroban.20.0.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_wasmi-815d26daf9fdf73d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.37","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\prettyplease-451e74ce8fdac27f\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wasmparser@0.116.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmparser-0.116.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wasmparser","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wasmparser-0.116.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libwasmparser-c3ff38f61b75192d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling_core@0.20.11","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.20.11\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"darling_core","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_core-0.20.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["strsim","suggestions"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling_core-0b3e47deea4a1326.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling_core-0b3e47deea4a1326.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#keccak@0.1.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\keccak-0.1.5\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"keccak","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\keccak-0.1.5\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libkeccak-7b975435768be6c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libbase64-318f5b453d295c4f.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libbase64-318f5b453d295c4f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-host@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-host-23.0.1\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-host-23.0.1\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["recording_mode","testutils"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-host-780a8ee0dfb97d0e\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-host-780a8ee0dfb97d0e\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstatic_assertions-26b437a9bbc6e300.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-common@23.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["GIT_REVISION","73dee74640fd5b3f60d5e130fccdc035d80ce76c"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-common-d21783853a5c56a9\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ed25519-dalek@2.2.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-dalek-2.2.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ed25519_dalek","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-dalek-2.2.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fast","rand_core","std","zeroize"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libed25519_dalek-b3114c744929f1b6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-builtin-sdk-macros@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-builtin-sdk-macros-23.0.1\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"soroban_builtin_sdk_macros","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-builtin-sdk-macros-23.0.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_builtin_sdk_macros-0e8d3bcaca9931bc.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_builtin_sdk_macros-0e8d3bcaca9931bc.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_builtin_sdk_macros-0e8d3bcaca9931bc.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_builtin_sdk_macros-0e8d3bcaca9931bc.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dtor-proc-macro@0.0.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtor-proc-macro-0.0.6\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"dtor_proc_macro","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtor-proc-macro-0.0.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\dtor_proc_macro-40a9f3731fec0b8a.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\dtor_proc_macro-40a9f3731fec0b8a.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\dtor_proc_macro-40a9f3731fec0b8a.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\dtor_proc_macro-40a9f3731fec0b8a.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-ec@0.4.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ec-0.4.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ark_ec","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-ec-0.4.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libark_ec-065f1523714d787a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-spec@23.0.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-spec-23.0.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_spec","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-spec-23.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_spec-e275fb5c45908edf.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_spec-e275fb5c45908edf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-common@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_env_common","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde","shallow-val-hash","std","testutils","wasmi"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_env_common-5b7cdf9c0501a3c3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha3@0.10.8","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha3-0.10.8\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha3","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha3-0.10.8\\src\\lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsha3-58c8c3643e84a46c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling_macro@0.20.11","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.20.11\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"darling_macro","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling_macro-0.20.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-2d9794881c2838c2.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-2d9794881c2838c2.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-2d9794881c2838c2.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\darling_macro-2d9794881c2838c2.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.37","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\prettyplease-0.2.37\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prettyplease","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\prettyplease-0.2.37\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libprettyplease-453bab4c18a4f0e6.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libprettyplease-453bab4c18a4f0e6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#k256@0.13.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\k256-0.13.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"k256","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\k256-0.13.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arithmetic","digest","ecdsa","ecdsa-core","sha2","sha256"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libk256-ee316bdc31ef9e46.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#p256@0.13.2","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\p256-0.13.2\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"p256","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\p256-0.13.2\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arithmetic","digest","ecdsa","ecdsa-core","sha2","sha256"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libp256-722353c31d0c1f5f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-host@23.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-env-host-5a66fc48816dc2a8\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex-literal@0.4.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-literal-0.4.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex_literal","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-literal-0.4.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhex_literal-119c87aa2a42b9a1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstatic_assertions-30f86d0aaa44d035.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libstatic_assertions-30f86d0aaa44d035.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dtor@0.1.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtor-0.1.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dtor","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtor-0.1.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__no_warn_on_missing_unsafe","proc_macro"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdtor-f5d46b3e714f662e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-sdk@23.0.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["testutils"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-sdk-8a41e533738612e8\\build-script-build.exe","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-sdk-8a41e533738612e8\\build_script_build.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.69\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libthiserror-98e3f0a6ec7d1daf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#macro-string@0.1.4","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\macro-string-0.1.4\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"macro_string","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\macro-string-0.1.4\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libmacro_string-2a3afafb9cfae71e.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libmacro_string-2a3afafb9cfae71e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ctor-proc-macro@0.0.6","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-proc-macro-0.0.6\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"ctor_proc_macro","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-proc-macro-0.0.6\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ctor_proc_macro-301afc8c4d789975.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ctor_proc_macro-301afc8c4d789975.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ctor_proc_macro-301afc8c4d789975.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\ctor_proc_macro-301afc8c4d789975.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ark-bls12-381@0.4.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-bls12-381-0.4.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ark_bls12_381","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ark-bls12-381-0.4.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["curve","default","scalar_field"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libark_bls12_381-ed159f2c90998a96.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-spec-rust@23.0.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-spec-rust-23.0.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_spec_rust","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-spec-rust-23.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_spec_rust-2a5388db8ac71ead.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_spec_rust-2a5388db8ac71ead.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#darling@0.20.11","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.20.11\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"darling","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\darling-0.20.11\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","suggestions"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling-3f1cb51e87361509.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libdarling-3f1cb51e87361509.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-common@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_env_common","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-common-23.0.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_env_common-e50b7dc3b609bd46.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_env_common-e50b7dc3b609bd46.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libheck-420969f9825c8e1b.rlib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libheck-420969f9825c8e1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ctor@0.5.0","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-0.5.0\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ctor","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-0.5.0\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__no_warn_on_missing_unsafe","default","dtor","proc_macro"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libctor-ab18a2834e80faba.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-sdk@23.0.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["RUSTC_VERSION","1.90.0"],["GIT_REVISION","6aa930b08eabfd578b7824a0d5de473cbd958282"]],"out_dir":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\build\\soroban-sdk-be4e03c3f2db313e\\out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes-lit@0.0.5","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-lit-0.0.5\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"bytes_lit","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-lit-0.0.5\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\bytes_lit-1d3ab321840d4e1a.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\bytes_lit-1d3ab321840d4e1a.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\bytes_lit-1d3ab321840d4e1a.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\bytes_lit-1d3ab321840d4e1a.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-env-host@23.0.1","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-host-23.0.1\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_env_host","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-env-host-23.0.1\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["recording_mode","testutils"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_env_host-cc3b4b2ae98d7d23.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-sdk-macros@23.0.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-macros-23.0.3\\Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"soroban_sdk_macros","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-macros-23.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["testutils"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_sdk_macros-5a4ba89969550a8e.dll","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_sdk_macros-5a4ba89969550a8e.dll.lib","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_sdk_macros-5a4ba89969550a8e.dll.exp","C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\soroban_sdk_macros-5a4ba89969550a8e.pdb"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-ledger-snapshot@23.0.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-ledger-snapshot-23.0.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_ledger_snapshot","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-ledger-snapshot-23.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["testutils"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_ledger_snapshot-df76543d75e032bf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#soroban-sdk@23.0.3","manifest_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"soroban_sdk","src_path":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["testutils"],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libsoroban_sdk-aec16be5c15a17ca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/hello-world#0.0.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\hello-world\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"hello_world","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\hello-world\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":true},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhello_world-d7f7add14d0508b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/hello-world#0.0.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\hello-world\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"hello_world","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\hello-world\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\target\\debug\\deps\\libhello_world-64384c668e9eb6ed.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"unused imports: `FromVal`, `Map`, `Val`, `Vec`, and `xdr::ToXdr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":105,"byte_end":108,"line_start":4,"line_end":4,"column_start":72,"column_end":75,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":72,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":118,"byte_end":121,"line_start":4,"line_end":4,"column_start":85,"column_end":88,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":85,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":140,"byte_end":150,"line_start":5,"line_end":5,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":161,"byte_end":164,"line_start":5,"line_end":5,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":178,"byte_end":185,"line_start":5,"line_end":5,"column_start":50,"column_end":57,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":50,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":103,"byte_end":108,"line_start":4,"line_end":4,"column_start":70,"column_end":75,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":70,"highlight_end":75}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":116,"byte_end":121,"line_start":4,"line_end":4,"column_start":83,"column_end":88,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":83,"highlight_end":88}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":138,"byte_end":150,"line_start":5,"line_end":5,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":10,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":159,"byte_end":164,"line_start":5,"line_end":5,"column_start":31,"column_end":36,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":31,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":176,"byte_end":185,"line_start":5,"line_end":5,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":48,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `FromVal`, `Map`, `Val`, `Vec`, and `xdr::ToXdr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:4:72\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"unused imports: `FromVal`, `Map`, `Val`, `Vec`, and `xdr::ToXdr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":105,"byte_end":108,"line_start":4,"line_end":4,"column_start":72,"column_end":75,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":72,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":118,"byte_end":121,"line_start":4,"line_end":4,"column_start":85,"column_end":88,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":85,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":140,"byte_end":150,"line_start":5,"line_end":5,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":161,"byte_end":164,"line_start":5,"line_end":5,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":178,"byte_end":185,"line_start":5,"line_end":5,"column_start":50,"column_end":57,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":50,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":103,"byte_end":108,"line_start":4,"line_end":4,"column_start":70,"column_end":75,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":70,"highlight_end":75}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":116,"byte_end":121,"line_start":4,"line_end":4,"column_start":83,"column_end":88,"is_primary":true,"text":[{"text":"    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,","highlight_start":83,"highlight_end":88}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":138,"byte_end":150,"line_start":5,"line_end":5,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":10,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":159,"byte_end":164,"line_start":5,"line_end":5,"column_start":31,"column_end":36,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":31,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":176,"byte_end":185,"line_start":5,"line_end":5,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":48,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `FromVal`, `Map`, `Val`, `Vec`, and `xdr::ToXdr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:4:72\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    contract, contractimpl, contracttype, Env, Address, Bytes, BytesN, Map, Symbol, Vec, vec,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"unused import: `testutils::Address as _`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":50,"byte_end":73,"line_start":4,"line_end":4,"column_start":19,"column_end":42,"is_primary":true,"text":[{"text":"use soroban_sdk::{testutils::Address as _, Address, Env};","highlight_start":19,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":50,"byte_end":75,"line_start":4,"line_end":4,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"use soroban_sdk::{testutils::Address as _, Address, Env};","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `testutils::Address as _`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:4:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse soroban_sdk::{testutils::Address as _, Address, Env};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"the trait `core::marker::Copy` cannot be implemented for this type","code":{"code":"E0204","explanation":"The `Copy` trait was implemented on a type which contains a field that doesn't\nimplement the `Copy` trait.\n\nErroneous code example:\n\n```compile_fail,E0204\nstruct Foo {\n    foo: Vec<u32>,\n}\n\nimpl Copy for Foo { } // error!\n```\n\nThe `Copy` trait is implemented by default only on primitive types. If your\ntype only contains primitive types, you'll be able to implement `Copy` on it.\nOtherwise, it won't be possible.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)] // error!\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":452,"byte_end":470,"line_start":15,"line_end":15,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    pub admin: Address,","highlight_start":5,"highlight_end":23}],"label":"this field does not implement `core::marker::Copy`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":398,"byte_end":402,"line_start":12,"line_end":12,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":398,"byte_end":402,"line_start":12,"line_end":12,"column_start":17,"column_end":21,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Copy)]","def_site_span":{"file_name":"C:\\Users\\cofia\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\marker.rs","byte_start":17354,"byte_end":17368,"line_start":474,"line_end":474,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"pub macro Copy($item:item) {","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0204]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait `core::marker::Copy` cannot be implemented for this type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:12:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub admin: Address,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis field does not implement `core::marker::Copy`\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"the trait `core::marker::Copy` cannot be implemented for this type","code":{"code":"E0204","explanation":"The `Copy` trait was implemented on a type which contains a field that doesn't\nimplement the `Copy` trait.\n\nErroneous code example:\n\n```compile_fail,E0204\nstruct Foo {\n    foo: Vec<u32>,\n}\n\nimpl Copy for Foo { } // error!\n```\n\nThe `Copy` trait is implemented by default only on primitive types. If your\ntype only contains primitive types, you'll be able to implement `Copy` on it.\nOtherwise, it won't be possible.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)] // error!\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":452,"byte_end":470,"line_start":15,"line_end":15,"column_start":5,"column_end":23,"is_primary":false,"text":[{"text":"    pub admin: Address,","highlight_start":5,"highlight_end":23}],"label":"this field does not implement `core::marker::Copy`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":398,"byte_end":402,"line_start":12,"line_end":12,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":398,"byte_end":402,"line_start":12,"line_end":12,"column_start":17,"column_end":21,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Copy)]","def_site_span":{"file_name":"C:\\Users\\cofia\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\marker.rs","byte_start":17354,"byte_end":17368,"line_start":474,"line_end":474,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"pub macro Copy($item:item) {","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0204]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait `core::marker::Copy` cannot be implemented for this type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:12:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub admin: Address,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis field does not implement `core::marker::Copy`\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"the trait `core::marker::Copy` cannot be implemented for this type","code":{"code":"E0204","explanation":"The `Copy` trait was implemented on a type which contains a field that doesn't\nimplement the `Copy` trait.\n\nErroneous code example:\n\n```compile_fail,E0204\nstruct Foo {\n    foo: Vec<u32>,\n}\n\nimpl Copy for Foo { } // error!\n```\n\nThe `Copy` trait is implemented by default only on primitive types. If your\ntype only contains primitive types, you'll be able to implement `Copy` on it.\nOtherwise, it won't be possible.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)] // error!\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":813,"byte_end":820,"line_start":34,"line_end":34,"column_start":17,"column_end":24,"is_primary":false,"text":[{"text":"    UserDeposit(Address),","highlight_start":17,"highlight_end":24}],"label":"this field does not implement `core::marker::Copy`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":718,"byte_end":722,"line_start":29,"line_end":29,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":718,"byte_end":722,"line_start":29,"line_end":29,"column_start":17,"column_end":21,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Copy)]","def_site_span":{"file_name":"C:\\Users\\cofia\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\marker.rs","byte_start":17354,"byte_end":17368,"line_start":474,"line_end":474,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"pub macro Copy($item:item) {","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0204]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait `core::marker::Copy` cannot be implemented for this type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:29:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UserDeposit(Address),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis field does not implement `core::marker::Copy`\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"the trait `core::marker::Copy` cannot be implemented for this type","code":{"code":"E0204","explanation":"The `Copy` trait was implemented on a type which contains a field that doesn't\nimplement the `Copy` trait.\n\nErroneous code example:\n\n```compile_fail,E0204\nstruct Foo {\n    foo: Vec<u32>,\n}\n\nimpl Copy for Foo { } // error!\n```\n\nThe `Copy` trait is implemented by default only on primitive types. If your\ntype only contains primitive types, you'll be able to implement `Copy` on it.\nOtherwise, it won't be possible.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)] // error!\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":813,"byte_end":820,"line_start":34,"line_end":34,"column_start":17,"column_end":24,"is_primary":false,"text":[{"text":"    UserDeposit(Address),","highlight_start":17,"highlight_end":24}],"label":"this field does not implement `core::marker::Copy`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":718,"byte_end":722,"line_start":29,"line_end":29,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":718,"byte_end":722,"line_start":29,"line_end":29,"column_start":17,"column_end":21,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Copy)]","def_site_span":{"file_name":"C:\\Users\\cofia\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\marker.rs","byte_start":17354,"byte_end":17368,"line_start":474,"line_end":474,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"pub macro Copy($item:item) {","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0204]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait `core::marker::Copy` cannot be implemented for this type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:29:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    UserDeposit(Address),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis field does not implement `core::marker::Copy`\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2354,"byte_end":2361,"line_start":87,"line_end":87,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:87:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2354,"byte_end":2361,"line_start":87,"line_end":87,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:87:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2480,"byte_end":2484,"line_start":91,"line_end":91,"column_start":32,"column_end":36,"is_primary":false,"text":[{"text":"                admin.into_val(&env),","highlight_start":32,"highlight_end":36}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2471,"byte_end":2479,"line_start":91,"line_end":91,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"                admin.into_val(&env),","highlight_start":23,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2555,"byte_end":2563,"line_start":93,"line_end":93,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2543,"byte_end":2543,"line_start":93,"line_end":93,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<u64 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2554,"byte_end":2564,"line_start":93,"line_end":93,"column_start":28,"column_end":38,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":28,"highlight_end":38}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:93:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                admin.into_val(&env),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                token.into_val(&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                period_secs.into_val(&env),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                period_secs\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<u64 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mperiod_secs\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2480,"byte_end":2484,"line_start":91,"line_end":91,"column_start":32,"column_end":36,"is_primary":false,"text":[{"text":"                admin.into_val(&env),","highlight_start":32,"highlight_end":36}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2471,"byte_end":2479,"line_start":91,"line_end":91,"column_start":23,"column_end":31,"is_primary":false,"text":[{"text":"                admin.into_val(&env),","highlight_start":23,"highlight_end":31}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2555,"byte_end":2563,"line_start":93,"line_end":93,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2543,"byte_end":2543,"line_start":93,"line_end":93,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<u64 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2554,"byte_end":2564,"line_start":93,"line_end":93,"column_start":28,"column_end":38,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":28,"highlight_end":38}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:93:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                admin.into_val(&env),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                token.into_val(&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                period_secs.into_val(&env),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                period_secs\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<u64 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mperiod_secs\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2419,"byte_end":2585,"line_start":89,"line_end":94,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                admin.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                token.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                period_secs.into_val(&env),","highlight_start":1,"highlight_end":44},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2419,"byte_end":2585,"line_start":89,"line_end":94,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                admin.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                token.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                period_secs.into_val(&env),","highlight_start":1,"highlight_end":44},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2555,"byte_end":2563,"line_start":93,"line_end":93,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2543,"byte_end":2543,"line_start":93,"line_end":93,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<u64 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2554,"byte_end":2564,"line_start":93,"line_end":93,"column_start":28,"column_end":38,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":28,"highlight_end":38}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:93:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &env,\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                admin.into_val(&env),\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                token.into_val(&env),\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                period_secs.into_val(&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                period_secs\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<u64 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mperiod_secs\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2419,"byte_end":2585,"line_start":89,"line_end":94,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                admin.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                token.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                period_secs.into_val(&env),","highlight_start":1,"highlight_end":44},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2419,"byte_end":2585,"line_start":89,"line_end":94,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                admin.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                token.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                period_secs.into_val(&env),","highlight_start":1,"highlight_end":44},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2555,"byte_end":2563,"line_start":93,"line_end":93,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2543,"byte_end":2543,"line_start":93,"line_end":93,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<u64 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":2554,"byte_end":2564,"line_start":93,"line_end":93,"column_start":28,"column_end":38,"is_primary":true,"text":[{"text":"                period_secs.into_val(&env),","highlight_start":28,"highlight_end":38}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:93:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &env,\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                admin.into_val(&env),\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                token.into_val(&env),\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                period_secs.into_val(&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                period_secs\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<u64 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mperiod_secs\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4239,"byte_end":4246,"line_start":149,"line_end":149,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:149:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4239,"byte_end":4246,"line_start":149,"line_end":149,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:149:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4332,"byte_end":4336,"line_start":151,"line_end":151,"column_start":38,"column_end":42,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":38,"highlight_end":42}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4323,"byte_end":4331,"line_start":151,"line_end":151,"column_start":29,"column_end":37,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":29,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4346,"byte_end":4354,"line_start":151,"line_end":151,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4339,"byte_end":4339,"line_start":151,"line_end":151,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4345,"byte_end":4355,"line_start":151,"line_end":151,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":51,"highlight_end":61}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:151:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4332,"byte_end":4336,"line_start":151,"line_end":151,"column_start":38,"column_end":42,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":38,"highlight_end":42}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4323,"byte_end":4331,"line_start":151,"line_end":151,"column_start":29,"column_end":37,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":29,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4346,"byte_end":4354,"line_start":151,"line_end":151,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4339,"byte_end":4339,"line_start":151,"line_end":151,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4345,"byte_end":4355,"line_start":151,"line_end":151,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":51,"highlight_end":61}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:151:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4307,"byte_end":4361,"line_start":151,"line_end":151,"column_start":13,"column_end":67,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4307,"byte_end":4361,"line_start":151,"line_end":151,"column_start":13,"column_end":67,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4346,"byte_end":4354,"line_start":151,"line_end":151,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4339,"byte_end":4339,"line_start":151,"line_end":151,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4345,"byte_end":4355,"line_start":151,"line_end":151,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":51,"highlight_end":61}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:151:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4307,"byte_end":4361,"line_start":151,"line_end":151,"column_start":13,"column_end":67,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4307,"byte_end":4361,"line_start":151,"line_end":151,"column_start":13,"column_end":67,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4346,"byte_end":4354,"line_start":151,"line_end":151,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4339,"byte_end":4339,"line_start":151,"line_end":151,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":4345,"byte_end":4355,"line_start":151,"line_end":151,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"            vec![&env, from.into_val(&env), amount.into_val(&env)],","highlight_start":51,"highlight_end":61}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:151:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, from.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6218,"byte_end":6225,"line_start":214,"line_end":214,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:214:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6218,"byte_end":6225,"line_start":214,"line_end":214,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:214:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6310,"byte_end":6314,"line_start":216,"line_end":216,"column_start":36,"column_end":40,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":36,"highlight_end":40}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6301,"byte_end":6309,"line_start":216,"line_end":216,"column_start":27,"column_end":35,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":27,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6324,"byte_end":6332,"line_start":216,"line_end":216,"column_start":50,"column_end":58,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":50,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6317,"byte_end":6317,"line_start":216,"line_end":216,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6323,"byte_end":6333,"line_start":216,"line_end":216,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":49,"highlight_end":59}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:216:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6310,"byte_end":6314,"line_start":216,"line_end":216,"column_start":36,"column_end":40,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":36,"highlight_end":40}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6301,"byte_end":6309,"line_start":216,"line_end":216,"column_start":27,"column_end":35,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":27,"highlight_end":35}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6324,"byte_end":6332,"line_start":216,"line_end":216,"column_start":50,"column_end":58,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":50,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6317,"byte_end":6317,"line_start":216,"line_end":216,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6323,"byte_end":6333,"line_start":216,"line_end":216,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":49,"highlight_end":59}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:216:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6287,"byte_end":6339,"line_start":216,"line_end":216,"column_start":13,"column_end":65,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6287,"byte_end":6339,"line_start":216,"line_end":216,"column_start":13,"column_end":65,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6324,"byte_end":6332,"line_start":216,"line_end":216,"column_start":50,"column_end":58,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":50,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6317,"byte_end":6317,"line_start":216,"line_end":216,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6323,"byte_end":6333,"line_start":216,"line_end":216,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":49,"highlight_end":59}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:216:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6287,"byte_end":6339,"line_start":216,"line_end":216,"column_start":13,"column_end":65,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6287,"byte_end":6339,"line_start":216,"line_end":216,"column_start":13,"column_end":65,"is_primary":false,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":13,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6324,"byte_end":6332,"line_start":216,"line_end":216,"column_start":50,"column_end":58,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":50,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6317,"byte_end":6317,"line_start":216,"line_end":216,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6323,"byte_end":6333,"line_start":216,"line_end":216,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"            vec![&env, to.into_val(&env), amount.into_val(&env)],","highlight_start":49,"highlight_end":59}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:216:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), amount\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            vec![&env, to.into_val(&env), \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mamount\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6823,"byte_end":6830,"line_start":232,"line_end":232,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:232:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6823,"byte_end":6830,"line_start":232,"line_end":232,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:232:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6920,"byte_end":6924,"line_start":234,"line_end":234,"column_start":38,"column_end":42,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":38,"highlight_end":42}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6823,"byte_end":6830,"line_start":232,"line_end":232,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":"cannot infer type of the type parameter `D` declared on the method `publish`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6911,"byte_end":6919,"line_start":234,"line_end":234,"column_start":29,"column_end":37,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":29,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider specifying the generic arguments","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6830,"byte_end":6830,"line_start":232,"line_end":232,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":"::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:232:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `D` declared on the method `publish`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Symbol::new(&env, \"commit_seed\"),),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        env.events().publish\u001b[0m\u001b[0m\u001b[38;5;10m::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6920,"byte_end":6924,"line_start":234,"line_end":234,"column_start":38,"column_end":42,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":38,"highlight_end":42}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6823,"byte_end":6830,"line_start":232,"line_end":232,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":"cannot infer type of the type parameter `D` declared on the method `publish`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6911,"byte_end":6919,"line_start":234,"line_end":234,"column_start":29,"column_end":37,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":29,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider specifying the generic arguments","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6830,"byte_end":6830,"line_start":232,"line_end":232,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":"::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:232:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `D` declared on the method `publish`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Symbol::new(&env, \"commit_seed\"),),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, soroban_sdk::Address>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Address` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        env.events().publish\u001b[0m\u001b[0m\u001b[38;5;10m::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6895,"byte_end":6926,"line_start":234,"line_end":234,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6823,"byte_end":6830,"line_start":232,"line_end":232,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":"cannot infer type of the type parameter `D` declared on the method `publish`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6895,"byte_end":6926,"line_start":234,"line_end":234,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider specifying the generic arguments","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6830,"byte_end":6830,"line_start":232,"line_end":232,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":"::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:232:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `D` declared on the method `publish`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Symbol::new(&env, \"commit_seed\"),),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        env.events().publish\u001b[0m\u001b[0m\u001b[38;5;10m::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6895,"byte_end":6926,"line_start":234,"line_end":234,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6823,"byte_end":6830,"line_start":232,"line_end":232,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":"cannot infer type of the type parameter `D` declared on the method `publish`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6895,"byte_end":6926,"line_start":234,"line_end":234,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            vec![&env, from.into_val(&env)],","highlight_start":13,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider specifying the generic arguments","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":6830,"byte_end":6830,"line_start":232,"line_end":232,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":"::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:232:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `D` declared on the method `publish`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            (Symbol::new(&env, \"commit_seed\"),),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![&env, from.into_val(&env)],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        env.events().publish\u001b[0m\u001b[0m\u001b[38;5;10m::<(soroban_sdk::Symbol,), soroban_sdk::Vec<_>>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++++++++++++++++++++\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no method named `to_vec` found for struct `soroban_sdk::Bytes` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":7623,"byte_end":7629,"line_start":255,"line_end":255,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"        let seed_slice = seed.to_vec();","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `to_val` with a similar name","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":7623,"byte_end":7629,"line_start":255,"line_end":255,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"        let seed_slice = seed.to_vec();","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":"to_val","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `to_vec` found for struct `soroban_sdk::Bytes` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:255:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let seed_slice = seed.to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `to_val` with a similar name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let seed_slice = seed.\u001b[0m\u001b[0m\u001b[38;5;9mto_vec\u001b[0m\u001b[0m();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let seed_slice = seed.\u001b[0m\u001b[0m\u001b[38;5;10mto_val\u001b[0m\u001b[0m();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no method named `to_vec` found for struct `soroban_sdk::Bytes` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":7623,"byte_end":7629,"line_start":255,"line_end":255,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"        let seed_slice = seed.to_vec();","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `to_val` with a similar name","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":7623,"byte_end":7629,"line_start":255,"line_end":255,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"        let seed_slice = seed.to_vec();","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":"to_val","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `to_vec` found for struct `soroban_sdk::Bytes` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:255:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let seed_slice = seed.to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `to_val` with a similar name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let seed_slice = seed.\u001b[0m\u001b[0m\u001b[38;5;9mto_vec\u001b[0m\u001b[0m();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let seed_slice = seed.\u001b[0m\u001b[0m\u001b[38;5;10mto_val\u001b[0m\u001b[0m();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":7873,"byte_end":7880,"line_start":265,"line_end":265,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:265:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":7873,"byte_end":7880,"line_start":265,"line_end":265,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:265:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":9880,"byte_end":9887,"line_start":327,"line_end":327,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:327:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":9880,"byte_end":9887,"line_start":327,"line_end":327,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"        env.events().publish(","highlight_start":22,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::events::Events::publish`: use the #[contractevent] macro on a contract event type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:327:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.events().publish(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10015,"byte_end":10019,"line_start":331,"line_end":331,"column_start":32,"column_end":36,"is_primary":false,"text":[{"text":"                prize.into_val(&env),","highlight_start":32,"highlight_end":36}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10006,"byte_end":10014,"line_start":331,"line_end":331,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":23,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, i128>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `i128` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10000,"byte_end":10000,"line_start":331,"line_end":331,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10005,"byte_end":10015,"line_start":331,"line_end":331,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:331:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                prize.into_val(&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, i128>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `i128` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                prize\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mprize\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10015,"byte_end":10019,"line_start":331,"line_end":331,"column_start":32,"column_end":36,"is_primary":false,"text":[{"text":"                prize.into_val(&env),","highlight_start":32,"highlight_end":36}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10006,"byte_end":10014,"line_start":331,"line_end":331,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":23,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: FromVal<Env, i128>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `i128` to implement `IntoVal<Env, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10000,"byte_end":10000,"line_start":331,"line_end":331,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10005,"byte_end":10015,"line_start":331,"line_end":331,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:331:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                prize.into_val(&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `_: FromVal<Env, i128>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `i128` to implement `IntoVal<Env, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                prize\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mprize\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":9954,"byte_end":10093,"line_start":329,"line_end":333,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                prize.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                env.ledger().sequence().into_val(&env),","highlight_start":1,"highlight_end":56},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":9954,"byte_end":10093,"line_start":329,"line_end":333,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                prize.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                env.ledger().sequence().into_val(&env),","highlight_start":1,"highlight_end":56},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10006,"byte_end":10014,"line_start":331,"line_end":331,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":23,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10000,"byte_end":10000,"line_start":331,"line_end":331,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10005,"byte_end":10015,"line_start":331,"line_end":331,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:331:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &env,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                prize.into_val(&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                env.ledger().sequence().into_val(&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                prize\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mprize\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":987,"byte_end":996,"line_start":44,"line_end":44,"column_start":39,"column_end":48,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":39,"highlight_end":48}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":9954,"byte_end":10093,"line_start":329,"line_end":333,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                prize.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                env.ledger().sequence().into_val(&env),","highlight_start":1,"highlight_end":56},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":957,"byte_end":980,"line_start":44,"line_end":44,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        $crate::Vec::from_array($env, [$($x),+])","highlight_start":9,"highlight_end":32}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":9954,"byte_end":10093,"line_start":329,"line_end":333,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            vec![","highlight_start":13,"highlight_end":18},{"text":"                &env,","highlight_start":1,"highlight_end":22},{"text":"                prize.into_val(&env),","highlight_start":1,"highlight_end":38},{"text":"                env.ledger().sequence().into_val(&env),","highlight_start":1,"highlight_end":56},{"text":"            ],","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":824,"byte_end":840,"line_start":39,"line_end":39,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10006,"byte_end":10014,"line_start":331,"line_end":331,"column_start":23,"column_end":31,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":23,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\n- impl<E, T, U> IntoVal<E, T> for U\n  where E: soroban_env_common::env::Env, T: FromVal<E, U>;\n- impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\n  where the constant `N` has type `usize`;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `soroban_sdk::Vec::<T>::from_array`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9607,"byte_end":9617,"line_start":370,"line_end":370,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs","byte_start":9301,"byte_end":9318,"line_start":360,"line_end":360,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `Vec::<T>::from_array`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a fully qualified path to specify the expected types","code":null,"level":"help","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10000,"byte_end":10000,"line_start":331,"line_end":331,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"<i128 as IntoVal<Env, T>>::into_val(&","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":10005,"byte_end":10015,"line_start":331,"line_end":331,"column_start":22,"column_end":32,"is_primary":true,"text":[{"text":"                prize.into_val(&env),","highlight_start":22,"highlight_end":32}],"label":null,"suggested_replacement":", ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:331:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &env,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                prize.into_val(&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                env.ledger().sequence().into_val(&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `_: IntoVal<Env, soroban_sdk::Val>` found in the `soroban_sdk` crate:\u001b[0m\n\u001b[0m            - impl<E, T, U> IntoVal<E, T> for U\u001b[0m\n\u001b[0m              where E: soroban_env_common::env::Env, T: FromVal<E, U>;\u001b[0m\n\u001b[0m            - impl<N> IntoVal<Env, soroban_sdk::Val> for soroban_sdk::crypto::Hash<N>\u001b[0m\n\u001b[0m              where the constant `N` has type `usize`;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `soroban_sdk::Vec::<T>::from_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\vec.rs:360:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: IntoVal<Env, Val> + TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Vec::<T>::from_array`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_array<const N: usize>(env: &Env, items: [T; N]) -> Vec<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using a fully qualified path to specify the expected types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                prize\u001b[0m\u001b[0m\u001b[38;5;9m.into_val(\u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m<i128 as IntoVal<Env, T>>::into_val(&\u001b[0m\u001b[0mprize\u001b[0m\u001b[0m\u001b[38;5;10m, \u001b[0m\u001b[0m&env),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"unused import: `TryFromVal`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":166,"byte_end":176,"line_start":5,"line_end":5,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `TryFromVal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:5:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::Env::register_contract`: use `register`","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":177,"byte_end":194,"line_start":9,"line_end":9,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"    let contract_id = env.register_contract(None, PrizePool);","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::Env::register_contract`: use `register`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:9:27\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let contract_id = env.register_contract(None, PrizePool);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":239,"byte_end":245,"line_start":10,"line_end":10,"column_start":26,"column_end":32,"is_primary":true,"text":[{"text":"    let admin = Address::random(&env);","highlight_start":26,"highlight_end":32}],"label":"function or associated item not found in `soroban_sdk::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\nsoroban_sdk::Address::from_str\nsoroban_sdk::Address::from_string\nsoroban_sdk::Address::from_string_bytes","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9039,"byte_end":9090,"line_start":270,"line_end":270,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn from_str(env: &Env, strkey: &str) -> Address {","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9627,"byte_end":9670,"line_start":282,"line_end":282,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn from_string(strkey: &String) -> Self {","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":10582,"byte_end":10630,"line_start":304,"line_end":304,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn from_string_bytes(strkey: &Bytes) -> Self {","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:10:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let admin = Address::random(&env);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `soroban_sdk::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_str\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string_bytes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs:270:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_str(env: &Env, strkey: &str) -> Address {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string(strkey: &String) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string_bytes(strkey: &Bytes) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":279,"byte_end":285,"line_start":11,"line_end":11,"column_start":26,"column_end":32,"is_primary":true,"text":[{"text":"    let token = Address::random(&env);","highlight_start":26,"highlight_end":32}],"label":"function or associated item not found in `soroban_sdk::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\nsoroban_sdk::Address::from_str\nsoroban_sdk::Address::from_string\nsoroban_sdk::Address::from_string_bytes","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9039,"byte_end":9090,"line_start":270,"line_end":270,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn from_str(env: &Env, strkey: &str) -> Address {","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9627,"byte_end":9670,"line_start":282,"line_end":282,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn from_string(strkey: &String) -> Self {","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":10582,"byte_end":10630,"line_start":304,"line_end":304,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn from_string_bytes(strkey: &Bytes) -> Self {","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:11:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let token = Address::random(&env);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `soroban_sdk::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_str\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string_bytes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs:270:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_str(env: &Env, strkey: &str) -> Address {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string(strkey: &String) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string_bytes(strkey: &Bytes) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::Env::register_contract`: use `register`","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":704,"byte_end":721,"line_start":27,"line_end":27,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"    let contract_id = env.register_contract(None, PrizePool);","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::Env::register_contract`: use `register`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:27:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let contract_id = env.register_contract(None, PrizePool);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":765,"byte_end":771,"line_start":28,"line_end":28,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"    let user = Address::random(&env);","highlight_start":25,"highlight_end":31}],"label":"function or associated item not found in `soroban_sdk::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\nsoroban_sdk::Address::from_str\nsoroban_sdk::Address::from_string\nsoroban_sdk::Address::from_string_bytes","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9039,"byte_end":9090,"line_start":270,"line_end":270,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn from_str(env: &Env, strkey: &str) -> Address {","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9627,"byte_end":9670,"line_start":282,"line_end":282,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn from_string(strkey: &String) -> Self {","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":10582,"byte_end":10630,"line_start":304,"line_end":304,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn from_string_bytes(strkey: &Bytes) -> Self {","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:28:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let user = Address::random(&env);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `soroban_sdk::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_str\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string_bytes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs:270:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_str(env: &Env, strkey: &str) -> Address {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string(strkey: &String) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string_bytes(strkey: &Bytes) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::Env::register_contract`: use `register`","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":1023,"byte_end":1040,"line_start":39,"line_end":39,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"    let contract_id = env.register_contract(None, PrizePool);","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::Env::register_contract`: use `register`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let contract_id = env.register_contract(None, PrizePool);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"use of deprecated method `soroban_sdk::Env::register_contract`: use `register`","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":1297,"byte_end":1314,"line_start":50,"line_end":50,"column_start":27,"column_end":44,"is_primary":true,"text":[{"text":"    let contract_id = env.register_contract(None, PrizePool);","highlight_start":27,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of deprecated method `soroban_sdk::Env::register_contract`: use `register`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:50:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let contract_id = env.register_contract(None, PrizePool);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":1359,"byte_end":1365,"line_start":51,"line_end":51,"column_start":26,"column_end":32,"is_primary":true,"text":[{"text":"    let admin = Address::random(&env);","highlight_start":26,"highlight_end":32}],"label":"function or associated item not found in `soroban_sdk::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\nsoroban_sdk::Address::from_str\nsoroban_sdk::Address::from_string\nsoroban_sdk::Address::from_string_bytes","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9039,"byte_end":9090,"line_start":270,"line_end":270,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn from_str(env: &Env, strkey: &str) -> Address {","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9627,"byte_end":9670,"line_start":282,"line_end":282,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn from_string(strkey: &String) -> Self {","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":10582,"byte_end":10630,"line_start":304,"line_end":304,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn from_string_bytes(strkey: &Bytes) -> Self {","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:51:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let admin = Address::random(&env);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `soroban_sdk::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_str\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string_bytes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs:270:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_str(env: &Env, strkey: &str) -> Address {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string(strkey: &String) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string_bytes(strkey: &Bytes) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts\\prize-pool\\src\\test.rs","byte_start":1399,"byte_end":1405,"line_start":52,"line_end":52,"column_start":26,"column_end":32,"is_primary":true,"text":[{"text":"    let token = Address::random(&env);","highlight_start":26,"highlight_end":32}],"label":"function or associated item not found in `soroban_sdk::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\nsoroban_sdk::Address::from_str\nsoroban_sdk::Address::from_string\nsoroban_sdk::Address::from_string_bytes","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9039,"byte_end":9090,"line_start":270,"line_end":270,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"    pub fn from_str(env: &Env, strkey: &str) -> Address {","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":9627,"byte_end":9670,"line_start":282,"line_end":282,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn from_string(strkey: &String) -> Self {","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs","byte_start":10582,"byte_end":10630,"line_start":304,"line_end":304,"column_start":5,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn from_string_bytes(strkey: &Bytes) -> Self {","highlight_start":5,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no function or associated item named `random` found for struct `soroban_sdk::Address` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\test.rs:52:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let token = Address::random(&env);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `soroban_sdk::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `soroban_sdk::Address` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_str\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string\u001b[0m\n\u001b[0m      soroban_sdk::Address::from_string_bytes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\cofia\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\soroban-sdk-23.0.3\\src\\address.rs:270:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_str(env: &Env, strkey: &str) -> Address {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string(strkey: &String) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string_bytes(strkey: &Bytes) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"unused import: `TryFromVal`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts\\prize-pool\\src\\lib.rs","byte_start":166,"byte_end":176,"line_start":5,"line_end":5,"column_start":38,"column_end":48,"is_primary":true,"text":[{"text":"    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,","highlight_start":38,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `TryFromVal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcontracts\\prize-pool\\src\\lib.rs:5:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    token, xdr::ToXdr, IntoVal, Val, TryFromVal, FromVal,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0204, E0283, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0204, E0283, E0599.\u001b[0m\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0204`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0204`.\u001b[0m\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0204, E0283, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0204, E0283, E0599.\u001b[0m\n"}}
{"reason":"compiler-message","package_id":"path+file:///C:/Users/cofia/OneDrive/Escritorio/Github%20Projects/stellar/soroban-pool/contracts/prize-pool#0.1.0","manifest_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\Cargo.toml","target":{"kind":["lib","cdylib"],"crate_types":["lib","cdylib"],"name":"prize_pool","src_path":"C:\\Users\\cofia\\OneDrive\\Escritorio\\Github Projects\\stellar\\soroban-pool\\contracts\\prize-pool\\src\\lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0204`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0204`.\u001b[0m\n"}}
{"reason":"build-finished","success":false}
